// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=accountHolderRepository
//

// Package accountHolderRepository is a generated GoMock package.
package accountHolderRepository

import (
	context "context"
	reflect "reflect"

	model "github.com/jetaimejeteveux/simple-banking-app/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIAccountHolderRepository is a mock of IAccountHolderRepository interface.
type MockIAccountHolderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountHolderRepositoryMockRecorder
	isgomock struct{}
}

// MockIAccountHolderRepositoryMockRecorder is the mock recorder for MockIAccountHolderRepository.
type MockIAccountHolderRepositoryMockRecorder struct {
	mock *MockIAccountHolderRepository
}

// NewMockIAccountHolderRepository creates a new mock instance.
func NewMockIAccountHolderRepository(ctrl *gomock.Controller) *MockIAccountHolderRepository {
	mock := &MockIAccountHolderRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountHolderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountHolderRepository) EXPECT() *MockIAccountHolderRepositoryMockRecorder {
	return m.recorder
}

// GetByAccountNumber mocks base method.
func (m *MockIAccountHolderRepository) GetByAccountNumber(ctx context.Context, accountNumber string) (*model.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountNumber", ctx, accountNumber)
	ret0, _ := ret[0].(*model.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountNumber indicates an expected call of GetByAccountNumber.
func (mr *MockIAccountHolderRepositoryMockRecorder) GetByAccountNumber(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountNumber", reflect.TypeOf((*MockIAccountHolderRepository)(nil).GetByAccountNumber), ctx, accountNumber)
}

// GetByIdentityNumber mocks base method.
func (m *MockIAccountHolderRepository) GetByIdentityNumber(ctx context.Context, identityNumber string) (*model.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdentityNumber", ctx, identityNumber)
	ret0, _ := ret[0].(*model.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdentityNumber indicates an expected call of GetByIdentityNumber.
func (mr *MockIAccountHolderRepositoryMockRecorder) GetByIdentityNumber(ctx, identityNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdentityNumber", reflect.TypeOf((*MockIAccountHolderRepository)(nil).GetByIdentityNumber), ctx, identityNumber)
}

// GetByPhoneNumber mocks base method.
func (m *MockIAccountHolderRepository) GetByPhoneNumber(ctx context.Context, phoneNumber string) (*model.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(*model.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockIAccountHolderRepositoryMockRecorder) GetByPhoneNumber(ctx, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockIAccountHolderRepository)(nil).GetByPhoneNumber), ctx, phoneNumber)
}

// IsPhoneOrIdentityExist mocks base method.
func (m *MockIAccountHolderRepository) IsPhoneOrIdentityExist(ctx context.Context, phoneNumber, identityNumber string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPhoneOrIdentityExist", ctx, phoneNumber, identityNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPhoneOrIdentityExist indicates an expected call of IsPhoneOrIdentityExist.
func (mr *MockIAccountHolderRepositoryMockRecorder) IsPhoneOrIdentityExist(ctx, phoneNumber, identityNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPhoneOrIdentityExist", reflect.TypeOf((*MockIAccountHolderRepository)(nil).IsPhoneOrIdentityExist), ctx, phoneNumber, identityNumber)
}

// Register mocks base method.
func (m *MockIAccountHolderRepository) Register(ctx context.Context, accountHolder *model.AccountHolder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, accountHolder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockIAccountHolderRepositoryMockRecorder) Register(ctx, accountHolder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAccountHolderRepository)(nil).Register), ctx, accountHolder)
}

// Update mocks base method.
func (m *MockIAccountHolderRepository) Update(ctx context.Context, accountHolder *model.AccountHolder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, accountHolder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIAccountHolderRepositoryMockRecorder) Update(ctx, accountHolder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIAccountHolderRepository)(nil).Update), ctx, accountHolder)
}
