// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=accountHolderService
//

// Package accountHolderService is a generated GoMock package.
package accountHolderService

import (
	context "context"
	reflect "reflect"

	model "github.com/jetaimejeteveux/simple-banking-app/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIAccountHolderService is a mock of IAccountHolderService interface.
type MockIAccountHolderService struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountHolderServiceMockRecorder
	isgomock struct{}
}

// MockIAccountHolderServiceMockRecorder is the mock recorder for MockIAccountHolderService.
type MockIAccountHolderServiceMockRecorder struct {
	mock *MockIAccountHolderService
}

// NewMockIAccountHolderService creates a new mock instance.
func NewMockIAccountHolderService(ctrl *gomock.Controller) *MockIAccountHolderService {
	mock := &MockIAccountHolderService{ctrl: ctrl}
	mock.recorder = &MockIAccountHolderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountHolderService) EXPECT() *MockIAccountHolderServiceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockIAccountHolderService) Deposit(ctx context.Context, request *model.DepositRequest) (*model.DepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, request)
	ret0, _ := ret[0].(*model.DepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockIAccountHolderServiceMockRecorder) Deposit(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockIAccountHolderService)(nil).Deposit), ctx, request)
}

// GetBalance mocks base method.
func (m *MockIAccountHolderService) GetBalance(ctx context.Context, request *model.GetBalanceRequest) (*model.GetBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, request)
	ret0, _ := ret[0].(*model.GetBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIAccountHolderServiceMockRecorder) GetBalance(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIAccountHolderService)(nil).GetBalance), ctx, request)
}

// RegisterAccount mocks base method.
func (m *MockIAccountHolderService) RegisterAccount(ctx context.Context, request *model.RegisterAccountRequest) (*model.RegisterAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccount", ctx, request)
	ret0, _ := ret[0].(*model.RegisterAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAccount indicates an expected call of RegisterAccount.
func (mr *MockIAccountHolderServiceMockRecorder) RegisterAccount(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccount", reflect.TypeOf((*MockIAccountHolderService)(nil).RegisterAccount), ctx, request)
}

// Withdraw mocks base method.
func (m *MockIAccountHolderService) Withdraw(ctx context.Context, request *model.WithdrawRequest) (*model.WithdrawResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, request)
	ret0, _ := ret[0].(*model.WithdrawResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIAccountHolderServiceMockRecorder) Withdraw(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIAccountHolderService)(nil).Withdraw), ctx, request)
}
